from django.core.management.base import BaseCommand
from django.db import transaction
from api.models import Country, Condition, EbayStoreType, Service, Shipping, Status, Tax, YahooAuctionStatus, YahooFreeMarketStatus

class Command(BaseCommand):
    help = 'マスターデータを投入します'

    @transaction.atomic
    def handle(self, *args, **options):
        try:
            # Countries
            countries_data = [
                (1,'AG','Antigua','アンティグア','A',1),
                (2,'TT','Trinidad and Tobago','トリニダード・トバゴ','A',1),
                (3,'AS','American Samoa','米領サモア','D',1),
                (4,'BN','Brunei','ブルネイ','D',1),
                (5,'KH','Cambodia','カンボジア','D',1),
                (6,'CK','Cook Islands','クック諸島','D',1),
                (7,'FJ','Fiji','フィジー','D',1),
                (8,'PF','French Polynesia','仏領ポリネシア','D',1),
                (9,'GU','Guam','グアム','D',1),
                (10,'LA','Laos','ラオス','D',1),
                (11,'MH','Marshall Islands','マーシャル諸島','D',1),
                (12,'FM','Micronesia','ミクロネシア','D',1),
                (13,'MN','Mongolia','モンゴル','D',1),
                (14,'MP','Northern Mariana Islands','北マリアナ諸島','D',1),
                (15,'NC','New Caledonia','ニューカレドニア','D',1),
                (16,'PW','Palau','パラオ','D',1),
                (17,'PG','Papua New Guinea','パプアニューギニア','D',1),
                (18,'WS','Samoa','サモア','D',1),
                (19,'TO','Tonga','トンガ','D',1),
                (20,'VU','Vanuatu','バヌアツ','D',1),
                (21,'WF','Wallis and Futuna','ウォリス・フツナ','D',1),
                (22,'AT','Austria','オーストリア','H',1),
                (23,'CZ','Czech Republic','チェコ','H',1),
                (24,'DK','Denmark','デンマーク','H',1),
                (25,'FI','Finland','フィンランド','H',1),
                (26,'GR','Greece','ギリシャ','H',1),
                (27,'GL','Greenland','グリーンランド','H',1),
                (28,'HU','Hungary','ハンガリー','H',1),
                (29,'IE','Ireland','アイルランド','H',1),
                (30,'IL','Israel','イスラエル','H',1),
                (31,'LI','Liechtenstein','リヒテンシュタイン','H',1),
                (32,'LU','Luxembourg','ルクセンブルグ','H',1),
                (33,'MC','Monaco','モナコ','H',1),
                (34,'NO','Norway','ノルウェー','H',1),
                (35,'PL','Poland','ポーランド','H',1),
                (36,'PT','Portugal','ポルトガル','H',1),
                (37,'SK','Slovakia','スロバキア','H',1),
                (38,'SE','Sweden','スウェーデン','H',1),
                (39,'CH','Switzerland','スイス','H',1),
                (40,'AL','Albania','アルバニア','I',1),
                (41,'AD','Andorra','アンドラ','I',1),
                (42,'AM','Armenia','アルメニア','I',1),
                (43,'AZ','Azerbaijan','アゼルバイジャン','I',1),
                (44,'BH','Bahrain','バーレーン','I',1),
                (45,'BY','Belarus','ベラルーシ','I',1),
                (46,'BA','Bosnia and Herzegovina','ボスニア·ヘルツェゴビナ','I',1),
                (47,'BG','Bulgaria','ブルガリア','I',1),
                (48,'HR','Croatia','クロアチア','I',1),
                (49,'CY','Cyprus','キプロス','I',1),
                (50,'EE','Estonia','エストニア','I',1),
                (51,'GE','Georgia','グルジア','I',1),
                (52,'GI','Gibraltar','ジブラルタル','I',1),
                (53,'KZ','Kazakhstan','カザフスタン','I',1),
                (54,'KW','Kuwait','クウェート','I',1),
                (55,'KG','Kyrgyzstan','キルギス','I',1),
                (56,'LV','Latvia','ラトビア','I',1),
                (57,'LT','Lithuania','リトアニア','I',1),
                (58,'MK','Macedonia','マケドニア','I',1),
                (59,'MT','Malta','マルタ','I',1),
                (60,'AF','Afghanistan','アフガニスタン','J',1),
                (61,'DZ','Algeria','アルジェリア','J',1),
                (62,'AO','Angola','アンゴラ','J',1),
                (63,'BD','Bangladesh','バングラデシュ','J',1),
                (64,'BJ','Benin','ベナン','J',1),
                (65,'BT','Bhutan','ブータン','J',1),
                (66,'BW','Botswana','ボツワナ','J',1),
                (67,'BF','Burkina Faso','ブルキナファソ','J',1),
                (68,'BI','Burundi','ブルンジ','J',1),
                (69,'CM','Cameroon','カメルーン','J',1),
                (70,'CV','Cape Verde','カーポベルデ','J',1),
                (71,'TD','Chad','チャド','J',1),
                (72,'CG','Congo','コンゴ共和国','J',1),
                (73,'CD','Democratic Republic of the Congo','コンゴ民主共和国','J',1),
                (74,'DJ','Djibouti','ジブチ','J',1),
                (75,'EG','Egypt','エジプト','J',1),
                (76,'ER','Eritrea','エリトリア','J',1),
                (77,'ET','Ethiopia','エチオピア','J',1),
                (78,'GA','Gabon','ガボン','J',1),
                (79,'GM','Gambia','ガンビア','J',1),
                (80,'GH','Ghana','ガーナ','J',1),
                (81,'GN','Guinea','ギニア','J',1),
                (82,'CI','Ivory Coast','コートジボワール','J',1),
                (83,'JO','Jordan','ヨルダン','J',1),
                (84,'KE','Kenya','ケニア','J',1),
                (85,'LB','Lebanon','レバノン','J',1),
                (86,'LS','Lesotho','レソト','J',1),
                (87,'LR','Liberia','リベリア','J',1),
                (88,'LY','Libya','リビア','J',1),
                (89,'MG','Madagascar','マダガスカル','J',1),
                (90,'MW','Malawi','マラウイ','J',1),
                (91,'CN','China (South)','中国(南部)','K',1),
                (92,'GB','United Kingdom','イギリス','M',1),
                (93,'DE','Germany','ドイツ','M',1),
                (94,'IT','Italy','イタリア','M',1),
                (95,'FR','France','フランス','M',1),
                (96,'ES','Spain','スペイン','M',1),
                (97,'BE','Belgium','ベルギー','M',1),
                (98,'NL','Netherlands','オランダ','M',1),
                (99,'VA','Vatican City','バチカン市国(教廷)','M',1),
                (100,'AU','Australia','オーストラリア','U',1),
                (101,'NZ','New Zealand','ニュージーランド','U',1)
            ]
            for id, code, name_en, name_jp, region, active in countries_data:
                Country.objects.create(
                    id=id,
                    code=code,
                    name_en=name_en,
                    name_jp=name_jp,
                    region=region,
                    active=active
                )
            self.stdout.write(self.style.SUCCESS('国データを投入しました'))

            # Conditions
            conditions_data = [
                (1,1000,'NEW'),
                (2,1500,'NEW_OTHER'),
                (3,1750,'NEW_WITH_DEFECTS'),
                (4,2000,'CERTIFIED_REFURBISHED'),
                (5,2010,'EXCELLENT_REFURBISHED'),
                (6,2020,'VERY_GOOD_REFURBISHED'),
                (7,2030,'GOOD_REFURBISHED'),
                (8,2500,'SELLER_REFURBISHED'),
                (9,2750,'LIKE_NEW'),
                (10,2990,'PRE_OWNED_EXCELLENT'),
                (11,3000,'USED_EXCELLENT'),
                (12,3010,'PRE_OWNED_FAIR'),
                (13,4000,'USED_VERY_GOOD'),
                (14,5000,'USED_GOOD'),
                (15,6000,'USED_ACCEPTABLE'),
                (16,7000,'FOR_PARTS_OR_NOT_WORKING')
            ]
            for id, code, name in conditions_data:
                Condition.objects.create(
                    id=id,
                    code=code,
                    name=name
                )
            self.stdout.write(self.style.SUCCESS('コンディションデータを投入しました'))

            # EbayStoreType
            store_types_data = [
                (1,'free',0.00,0.00,250,0.40,15.0,0,1.35),
                (2,'basic',27.95,21.95,1000,0.25,11.5,1,1.35),
                (3,'premium',74.95,59.95,10000,0.10,11.5,1,1.35),
                (4,'anchor',349.95,299.95,25000,0.05,11.5,1,1.35),
                (5,'enterprise',None,2999.95,100000,0.10,11.5,1,1.35)
            ]
            for id, name, monthly_fee, annual_fee, listing_limit, insertion_fee, final_value_fee, auto_relist, international_fee in store_types_data:
                EbayStoreType.objects.create(
                    id=id,
                    name=name,
                    monthly_fee=monthly_fee,
                    annual_fee=annual_fee,
                    listing_limit=listing_limit,
                    insertion_fee=insertion_fee,
                    final_value_fee=final_value_fee,
                    auto_relist=auto_relist,
                    international_fee=international_fee
                )
            self.stdout.write(self.style.SUCCESS('eBayストアタイプデータを投入しました'))

            # Services
            services_data = [
                (1,'SpeedPAK Japan – Ship via FedEx'),
                (2,'SpeedPAK Japan – Ship via DHL'),
                (3,'SpeedPAK Economy Japan')
            ]
            for id, name in services_data:
                Service.objects.create(
                    id=id,
                    name=name
                )
            self.stdout.write(self.style.SUCCESS('サービスデータを投入しました'))

            # Shipping
            shipping_data = [
                (23,'A',1,2839.00,1),(24,'D',1,6129.00,1),(25,'E',1,1984.00,1),(26,'F',1,2016.00,1),(27,'G',1,2350.00,1),
                (28,'H',1,1980.00,1),(29,'I',1,1999.00,1),(30,'J',1,1909.00,1),(31,'K',1,2365.00,1),(32,'M',1,1916.00,1),
                (33,'U',1,2609.00,1),(34,'A',1,3827.00,1),(35,'D',1,6868.00,1),(36,'E',1,2439.00,1),(37,'F',1,2478.00,1),
                (38,'G',1,3794.00,1),(39,'H',1,2442.00,1),(40,'I',1,2466.00,1),(41,'J',1,3081.00,1),(42,'K',1,2456.00,1),
                (43,'M',1,2237.00,1),(44,'U',1,2873.00,1),(45,'A',2,4386.00,1),(46,'D',2,8049.00,1),(47,'E',2,2666.00,1),
                (48,'F',2,2707.00,1),(49,'G',2,4830.00,1),(50,'H',2,2906.00,1),(51,'I',2,2881.00,1),(52,'J',2,4072.00,1),
                (53,'K',2,2519.00,1),(54,'M',2,2603.00,1),(55,'U',2,2883.00,1),(56,'A',2,4754.00,1),(57,'D',2,8890.00,1),
                (58,'E',2,2918.00,1),(59,'F',2,2963.00,1),(60,'G',2,5561.00,1),(61,'H',2,3265.00,1),(62,'I',2,3315.00,1),
                (63,'J',2,4440.00,1),(64,'K',2,2730.00,1),(65,'M',2,2925.00,1),(66,'U',2,3185.00,1),(67,'A',3,5127.00,1),
                (68,'D',3,9731.00,1),(69,'E',3,3173.00,1),(70,'F',3,3224.00,1),(71,'G',3,6299.00,1),(72,'H',3,3627.00,1),
                (73,'I',3,3750.00,1),(74,'J',3,4810.00,1),(75,'K',3,2945.00,1),(76,'M',3,3249.00,1),(77,'U',3,3486.00,1),
                (78,'A',3,5493.00,1),(79,'D',3,10510.00,1),(80,'E',3,3329.00,1),(81,'F',3,3374.00,1),(82,'G',3,8604.00,1),
                (83,'H',3,3818.00,1),(84,'I',3,4023.00,1),(85,'J',3,6611.00,1),(86,'K',3,3156.00,1),(87,'M',3,3273.00,1),
                (88,'U',3,3766.00,1),(89,'A',4,5860.00,1),(90,'D',4,11290.00,1),(91,'E',4,3382.00,1),(92,'F',4,3424.00,1),
                (93,'G',4,9555.00,1),(94,'H',4,3907.00,1),(95,'I',4,4148.00,1),(96,'J',4,7472.00,1),(97,'K',4,3366.00,1),
                (98,'M',4,3327.00,1),(99,'U',4,4045.00,1),(100,'A',4,6227.00,1),(101,'D',4,12069.00,1),(102,'E',4,3786.00,1),
                (103,'F',4,3833.00,1),(104,'G',4,10442.00,1),(105,'H',4,4248.00,1),(106,'I',4,4554.00,1),(107,'J',4,8226.00,1),
                (108,'K',4,3577.00,1),(109,'M',4,3615.00,1),(110,'U',4,4323.00,1),(111,'A',5,6594.00,1),(112,'D',5,12848.00,1),
                (113,'E',5,4188.00,1),(114,'F',5,4242.00,1),(115,'G',5,11329.00,1),(116,'H',5,4587.00,1),(117,'I',5,4960.00,1),
                (118,'J',5,8980.00,1),(119,'K',5,3788.00,1),(120,'M',5,3905.00,1),(121,'U',5,4602.00,1),(122,'A',5,6961.00,1),
                (123,'D',5,13626.00,1),(124,'E',5,4591.00,1),(125,'F',5,4652.00,1),(126,'G',5,12215.00,1),(127,'H',5,4926.00,1),
                (128,'I',5,5366.00,1),(129,'J',5,9734.00,1),(130,'K',5,3997.00,1),(131,'M',5,4194.00,1),(132,'U',5,4882.00,1),
                (133,'A',6,6964.00,1),(134,'D',6,14988.00,1),(135,'E',6,5560.00,1),(136,'F',6,5648.00,1),(137,'G',6,14485.00,1),
                (138,'H',6,5951.00,1),(139,'I',6,6788.00,1),(140,'J',6,12853.00,1),(141,'K',6,4018.00,1),(142,'M',6,4880.00,1),
                (143,'U',6,5086.00,1),(144,'A',6,7233.00,1),(145,'D',6,15830.00,1),(146,'E',6,5737.00,1),(147,'F',6,5828.00,1),
                (148,'G',6,14884.00,1),(149,'H',6,6196.00,1),(150,'I',6,6984.00,1),(151,'J',6,13386.00,1),(152,'K',6,4173.00,1),
                (153,'M',6,5081.00,1),(154,'U',6,5372.00,1),(155,'A',7,7503.00,1),(156,'D',7,16671.00,1),(157,'E',7,5914.00,1),
                (158,'F',7,6009.00,1),(159,'G',7,15283.00,1),(160,'H',7,6441.00,1),(161,'I',7,7178.00,1),(162,'J',7,13921.00,1),
                (163,'K',7,4329.00,1),(164,'M',7,5283.00,1),(165,'U',7,5657.00,1),(166,'A',7,7772.00,1),(167,'D',7,17512.00,1),
                (168,'E',7,6090.00,1),(169,'F',7,6189.00,1),(170,'G',7,15682.00,1),(171,'H',7,6686.00,1),(172,'I',7,7374.00,1),
                (173,'J',7,14455.00,1),(174,'K',7,4484.00,1),(175,'M',7,5483.00,1),(176,'U',7,5942.00,1),(177,'A',8,8041.00,1),
                (178,'D',8,18354.00,1),(179,'E',8,6267.00,1),(180,'F',8,6369.00,1),(181,'G',8,16082.00,1),(182,'H',8,6931.00,1),
                (183,'I',8,7569.00,1),(184,'J',8,14990.00,1),(185,'K',8,4639.00,1),(186,'M',8,5684.00,1),(187,'U',8,6229.00,1),
                (188,'A',8,8311.00,1),(189,'D',8,19194.00,1),(190,'E',8,6444.00,1),(191,'F',8,6549.00,1),(192,'G',8,16481.00,1),
                (193,'H',8,7177.00,1),(194,'I',8,7764.00,1),(195,'J',8,15523.00,1),(196,'K',8,4794.00,1),(197,'M',8,5885.00,1),
                (198,'U',8,6514.00,1),(199,'A',9,8580.00,1),(200,'D',9,20036.00,1),(201,'E',9,6621.00,1),(202,'F',9,6729.00,1),
                (203,'G',9,16880.00,1),(204,'H',9,7422.00,1),(205,'I',9,7960.00,1),(206,'J',9,16058.00,1),(207,'K',9,4950.00,1),
                (208,'M',9,6086.00,1),(209,'U',9,6799.00,1),(210,'A',9,8849.00,1),(211,'D',9,20877.00,1),(212,'E',9,6797.00,1),
                (213,'F',9,6910.00,1),(214,'G',9,17279.00,1),(215,'H',9,7667.00,1),(216,'I',9,8155.00,1),(217,'J',9,16592.00,1),
                (218,'K',9,5106.00,1),(219,'M',9,6288.00,1),(220,'U',9,7085.00,1),(221,'A',10,8889.00,1),(222,'D',10,21089.00,1),
                (223,'E',10,8327.00,1),(224,'F',10,8450.00,1),(225,'G',10,20886.00,1),(226,'H',10,9328.00,1),(227,'I',10,10130.00,1),
                (228,'J',10,20041.00,1),(229,'K',10,5261.00,1),(230,'M',10,7634.00,1),(231,'U',10,8041.00,1),(232,'A',10,9152.00,1),
                (233,'D',10,21905.00,1),(234,'E',10,8539.00,1),(235,'F',10,8665.00,1),(236,'G',10,21358.00,1),(237,'H',10,9618.00,1),
                (238,'I',10,10367.00,1),(239,'J',10,20665.00,1),(240,'K',10,5417.00,1),(241,'M',10,7870.00,1),(242,'U',10,8351.00,1),
                (243,'A',11,9386.00,1),(244,'D',11,22565.00,1),(245,'E',11,8765.00,1),(246,'F',11,8910.00,1),(247,'G',11,21886.00,1),
                (248,'H',11,9816.00,1),(249,'I',11,10628.00,1),(250,'J',11,21466.00,1),(251,'K',11,5556.00,1),(252,'M',11,8031.00,1),
                (253,'U',11,8604.00,1),(254,'A',11,9622.00,1),(255,'D',11,23226.00,1),(256,'E',11,8991.00,1),(257,'F',11,9155.00,1),
                (258,'G',11,22415.00,1),(259,'H',11,10013.00,1),(260,'I',11,10888.00,1),(261,'J',11,22268.00,1),(262,'K',11,5695.00,1),
                (263,'M',11,8193.00,1),(264,'U',11,8855.00,1),(265,'A',12,9857.00,1),(266,'D',12,23885.00,1),(267,'E',12,9217.00,1),
                (268,'F',12,9401.00,1),(269,'G',12,22943.00,1),(270,'H',12,10211.00,1),(271,'I',12,11149.00,1),(272,'J',12,23069.00,1),
                (273,'K',12,5834.00,1),(274,'M',12,8355.00,1),(275,'U',12,9107.00,1),(276,'A',12,10092.00,1),(277,'D',12,24545.00,1),
                (278,'E',12,9444.00,1),(279,'F',12,9645.00,1),(280,'G',12,23471.00,1),(281,'H',12,10408.00,1),(282,'I',12,11409.00,1),
                (283,'J',12,23870.00,1),(284,'K',12,5973.00,1),(285,'M',12,8516.00,1),(286,'U',12,9358.00,1)
            ]
            for id, region, service_id, price, active in shipping_data:
                Shipping.objects.create(
                    id=id,
                    region=region,
                    service_id=service_id,
                    price=price,
                    active=active
                )
            self.stdout.write(self.style.SUCCESS('配送データを投入しました'))

            # Status
            status_data = [
                (1,'出品中'),
                (2,'取下げ'),
                (3,'売却'),
                (4,'完了'),
                (5,'出品失敗')
            ]
            for id, name in status_data:
                Status.objects.create(
                    id=id,
                    name=name
                )
            self.stdout.write(self.style.SUCCESS('ステータスデータを投入しました'))

            # Tax
            tax_data = [
                (1,10.00),
                (2,8.00)
            ]
            for id, rate in tax_data:
                Tax.objects.create(
                    id=id,
                    rate=rate
                )
            self.stdout.write(self.style.SUCCESS('税率データを投入しました'))

            # YahooAuctionStatus
            yahoo_auction_status_data = [
                (1,'購入可'),
                (2,'購入済'),
                (3,'購入不可')
            ]
            for id, name in yahoo_auction_status_data:
                YahooAuctionStatus.objects.create(
                    id=id,
                    name=name
                )
            self.stdout.write(self.style.SUCCESS('ヤフオクステータスデータを投入しました'))

            # YahooFreeMarketStatus
            yahoo_free_market_status_data = [
                (1,'購入可'),
                (2,'購入済'),
                (3,'購入不可')
            ]
            for id, name in yahoo_free_market_status_data:
                YahooFreeMarketStatus.objects.create(
                    id=id,
                    name=name
                )
            self.stdout.write(self.style.SUCCESS('ヤフーフリマステータスデータを投入しました'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'エラーが発生しました: {e}'))
            raise